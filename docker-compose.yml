
services:
  lfs_postgres:
    image: postgres:15
    container_name: lostfound-service-db
    restart: always
    environment:
      POSTGRES_DB: ${LFS_POSTGRES_DB}
      POSTGRES_USER: ${LFS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${LFS_POSTGRES_PASSWORD}
    ports:
      - "${LFS_POSTGRES_PORT}:5432"
    volumes:
      - lfs_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LFS_POSTGRES_USER} -d ${LFS_POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  lostfound:
    image: lumijiez/lostfound-service:latest
    container_name: lostfound-service
    depends_on:
      lfs_postgres:
        condition: service_healthy
    ports:
      - "${LFS_SERVICE_PORT}:80"
    environment:
      POSTGRES_HOST: lfs_postgres
      POSTGRES_PORT: ${LFS_POSTGRES_PORT}
      POSTGRES_DB: ${LFS_POSTGRES_DB}
      POSTGRES_USER: ${LFS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${LFS_POSTGRES_PASSWORD}
      ConnectionStrings__DefaultConnection: "Host=lfs_postgres;Port=5432;Database=${LFS_POSTGRES_DB};Username=${LFS_POSTGRES_USER};Password=${LFS_POSTGRES_PASSWORD}"
    restart: always
    command: >
      /bin/sh -c "
      echo 'Waiting for Postgres to be ready...' &&
      until pg_isready -h lfs_postgres -p ${LFS_POSTGRES_PORT} -U ${LFS_POSTGRES_USER}; do
        sleep 2
      done &&
      echo 'Postgres ready, starting Lost & Found service...' &&
      dotnet LostFound.dll
      "

  bs_postgres:
    image: postgres:15
    container_name: budgeting-service-db
    restart: always
    environment:
      POSTGRES_DB: ${BS_POSTGRES_DB}
      POSTGRES_USER: ${BS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${BS_POSTGRES_PASSWORD}
    ports:
      - "${BS_POSTGRES_PORT}:5432"
    volumes:
      - bs_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BS_POSTGRES_USER} -d ${BS_POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  budgeting:
    image: lumijiez/budgeting-service:latest
    container_name: budgeting-service
    depends_on:
      bs_postgres:
        condition: service_healthy
    ports:
      - "${BS_SERVICE_PORT}:80"
    environment:
      POSTGRES_HOST: bs_postgres
      POSTGRES_PORT: ${BS_POSTGRES_PORT}
      POSTGRES_DB: ${BS_POSTGRES_DB}
      POSTGRES_USER: ${BS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${BS_POSTGRES_PASSWORD}
      ConnectionStrings__DefaultConnection: "Host=bs_postgres;Port=5432;Database=${BS_POSTGRES_DB};Username=${BS_POSTGRES_USER};Password=${BS_POSTGRES_PASSWORD}"
    restart: always
    command: >
      /bin/sh -c "
      echo 'Waiting for Postgres to be ready...' &&
      until pg_isready -h bs_postgres -p ${BS_POSTGRES_PORT} -U ${BS_POSTGRES_USER}; do
        sleep 2
      done &&
      echo 'Postgres ready, starting Budgeting service...' &&
      dotnet Budgeting.dll
      "

  mongo:
    image: mongo:7
    container_name: fafcab-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval \"db.runCommand({ ping: 1 }).ok\" || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  mongo-init:
    image: mongo:7
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      CHECKIN_DB_NAME: ${CHECKIN_DB_NAME}
      CHECKIN_DB_USER: ${CHECKIN_DB_USER}
      CHECKIN_DB_PASS: ${CHECKIN_DB_PASS}
      BOOKING_DB_NAME: ${BOOKING_DB_NAME}
      BOOKING_DB_USER: ${BOOKING_DB_USER}
      BOOKING_DB_PASS: ${BOOKING_DB_PASS}
    entrypoint: ["bash","-lc"]
    command: |
      set -e
      echo "Waiting for Mongo to be ready..."
      until mongosh --quiet --host mongo --eval 'db.runCommand({ ping: 1 })' >/dev/null 2>&1; do sleep 2; done
      echo "Creating app users if missing..."
      mongosh --host mongo -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin <<'JS'
      const env = process.env;
      function ensure(dbName, user, pass) {
        const d = db.getSiblingDB(dbName);
        if (!d.getUser(user)) {
          d.createUser({ user, pwd: pass, roles: [{ role: "readWrite", db: dbName }]});
          print(`Created user ${user} in ${dbName}`);
        } else {
          print(`User ${user} already exists in ${dbName}`);
        }
      }
      ensure(env.CHECKIN_DB_NAME, env.CHECKIN_DB_USER, env.CHECKIN_DB_PASS);
      ensure(env.BOOKING_DB_NAME, env.BOOKING_DB_USER, env.BOOKING_DB_PASS);
      JS

  booking:
    image: lewda853/fafcab-booking-service:latest
    restart: unless-stopped
    ports:
      - "${BOOKING_PORT}:3001"
    environment:
      PORT: "3001"
      MONGO_URI: "mongodb://${BOOKING_DB_USER}:${BOOKING_DB_PASS}@mongo:27017/${BOOKING_DB_NAME}?authSource=${BOOKING_DB_NAME}"
    depends_on:
      mongo:
        condition: service_healthy

  checkin:
    image: lewda853/fafcab-checkin-service:latest
    restart: unless-stopped
    ports:
      - "${CHECKIN_PORT}:3002"
    environment:
      PORT: "3002"
      MONGO_URI: "mongodb://${CHECKIN_DB_USER}:${CHECKIN_DB_PASS}@mongo:27017/${CHECKIN_DB_NAME}?authSource=${CHECKIN_DB_NAME}"
    depends_on:
      mongo:
        condition: service_healthy

  sharing_postgres:
    image: postgres:16
    container_name: sharing-service-db
    environment:
      POSTGRES_USER: ${SHARING_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SHARING_POSTGRES_PASSWORD}
      POSTGRES_DB: ${SHARING_POSTGRES_DB}
    ports:
      - "${SHARING_POSTGRES_PORT:-5433}:5432"
    volumes:
      - sharing_postgres_data:/var/lib/postgresql/data
      - ./seed/sharing-service:/docker-entrypoint-initdb.d

  sharing-service:
    image: felycianovac/sharing-service:1.0.0
    environment:
      DB_CONNECTION: ${SHARING_DB_CONNECTION}
      JWT_SECRET: ${SHARING_JWT_SECRET}
      JWT_AUDIENCE: ${SHARING_JWT_AUDIENCE}
      JWT_ISSUER: ${SHARING_JWT_ISSUER}
      NOTIFICATION_SERVICE_URL: ${SHARING_NOTIFICATION_SERVICE_URL}
    ports:
      - "${SHARING_SERVICE_PORT:-8081}:8080"
    depends_on:
      - sharing_postgres

  fund-raising-service:
    container_name: fund-raising-service
    image: felycianovac/fund-raising-service:1.0.0
    environment:
      DB_CONNECTION: ${FR_DB_CONNECTION}
      JWT_SECRET: ${FR_JWT_SECRET}
      JWT_AUDIENCE: ${FR_JWT_AUDIENCE}
      JWT_ISSUER: ${FR_JWT_ISSUER}
      SHARING_SERVICE_URL: ${FR_SHARING_SERVICE_URL}
      TEA_SERVICE_URL: ${FR_TEA_SERVICE_URL}
    ports:
      - "${FR_SERVICE_PORT:-8082}:8080"
    depends_on:
      - fr_postgres

  fr_postgres:
    image: postgres:16
    container_name: fund-raising-service-db
    environment:
      POSTGRES_USER: ${FR_POSTGRES_USER}
      POSTGRES_PASSWORD: ${FR_POSTGRES_PASSWORD}
      POSTGRES_DB: ${FR_POSTGRES_DB}
    ports:
      - "${FR_POSTGRES_PORT:-5434}:5432"
    volumes:
      - fr_postgres_data:/var/lib/postgresql/data
      - ./seed/fund-raising-service:/docker-entrypoint-initdb.d

volumes:
  lfs_postgres_data:
  bs_postgres_data:
  mongo_data:
  sharing_postgres_data:
  fr_postgres_data:
