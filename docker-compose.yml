services:

  # =============================================================================
  # =                            DO NOT TOUCH BELOW                             =
  # =============================================================================
  discovery:
    image: lumijiez/discovery:latest
    container_name: discovery
    ports:
      - "2222:2222"
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}

  gateway:
    image: lumijiez/gateway:latest
    container_name: gateway
    ports:
      - "1111:1111"
    environment:
      - GATEWAY_SERVICE_DISCOVERY_URL_ALL=${GATEWAY_SERVICE_DISCOVERY_URL_ALL}
      - GATEWAY_SERVICE_DISCOVERY_URL=${GATEWAY_SERVICE_DISCOVERY_URL}
      - GATEWAY_REDIS_URI=${GATEWAY_REDIS_URI}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      discovery:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  gateway-cache:
    image: redis:7-alpine
    container_name: gateway-cache
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - gateway-cache:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
  # =============================================================================
  # =                          DO NOT TOUCH ABOVE                               =
  # =============================================================================

  tea_management:
    image: ecaterinamunteanu/tea-management-service:latest
    container_name: tea-management
    platform: linux/amd64
    ports:
      - "${TEA_MGMT_SERVICE_PORT}:8080"

  communication:
    image: ecaterinamunteanu/communication-service:latest
    container_name: communication
    platform: linux/amd64
    ports:
      - "${COMMUNICATION_SERVICE_PORT}:8080"

  ums_postgres:
    image: postgres:15
    container_name: user-management-service-db
    restart: always
    environment:
      POSTGRES_DB: ${UMS_DB_NAME}
      POSTGRES_USER: ${UMS_DB_USERNAME}
      POSTGRES_PASSWORD: ${UMS_DB_PASSWORD}
    ports:
      - "${UMS_DB_PORT}:5432"
    volumes:
      - ums_postgres_data:/var/lib/postgresql/data
      - ./seed/user-management-service:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${UMS_DB_USERNAME} -d ${UMS_DB_NAME} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
  
  lfs_postgres:
    image: postgres:15
    container_name: lostfound-service-db
    restart: always
    environment:
      POSTGRES_DB: ${LFS_POSTGRES_DB}
      POSTGRES_USER: ${LFS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${LFS_POSTGRES_PASSWORD}
    ports:
      - "${LFS_POSTGRES_PORT}:5432"
    volumes:
      - lfs_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LFS_POSTGRES_USER} -d ${LFS_POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  lostfound:
    image: lumijiez/lostfound-service:latest
    container_name: lostfound-service
    platform: linux/amd64
    depends_on:
      lfs_postgres:
        condition: service_healthy
    ports:
      - "${LFS_SERVICE_PORT}:80"
    environment:
      POSTGRES_HOST: lfs_postgres
      POSTGRES_PORT: ${LFS_POSTGRES_PORT}
      POSTGRES_DB: ${LFS_POSTGRES_DB}
      POSTGRES_USER: ${LFS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${LFS_POSTGRES_PASSWORD}
      GATEWAY_URI: "http://faf-mgmt-gateway:${GATEWAY_PORT}"
      ConnectionStrings__DefaultConnection: "Host=lfs_postgres;Port=5432;Database=${LFS_POSTGRES_DB};Username=${LFS_POSTGRES_USER};Password=${LFS_POSTGRES_PASSWORD}"
    restart: always
    command: >
      /bin/sh -c "
      echo 'Waiting for Postgres to be ready...' &&
      until pg_isready -h lfs_postgres -p ${LFS_POSTGRES_PORT} -U ${LFS_POSTGRES_USER}; do
        sleep 2
      done &&
      echo 'Postgres ready, starting Lost & Found service...' &&
      dotnet LostFound.dll
      "

  bs_postgres:
    image: postgres:15
    container_name: budgeting-service-db
    restart: always
    environment:
      POSTGRES_DB: ${BS_POSTGRES_DB}
      POSTGRES_USER: ${BS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${BS_POSTGRES_PASSWORD}
    ports:
      - "${BS_POSTGRES_PORT}:5432"
    volumes:
      - bs_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BS_POSTGRES_USER} -d ${BS_POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  budgeting:
    image: lumijiez/budgeting-service:latest
    container_name: budgeting-service
    platform: linux/amd64
    depends_on:
      bs_postgres:
        condition: service_healthy
    ports:
      - "${BS_SERVICE_PORT}:80"
    environment:
      POSTGRES_HOST: bs_postgres
      POSTGRES_PORT: ${BS_POSTGRES_PORT}
      POSTGRES_DB: ${BS_POSTGRES_DB}
      POSTGRES_USER: ${BS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${BS_POSTGRES_PASSWORD}
      GATEWAY_URI: "http://faf-mgmt-gateway:${GATEWAY_PORT}"
      ConnectionStrings__DefaultConnection: "Host=bs_postgres;Port=5432;Database=${BS_POSTGRES_DB};Username=${BS_POSTGRES_USER};Password=${BS_POSTGRES_PASSWORD}"
    
    restart: always
    command: >
      /bin/sh -c "
      echo 'Waiting for Postgres to be ready...' &&
      until pg_isready -h bs_postgres -p ${BS_POSTGRES_PORT} -U ${BS_POSTGRES_USER}; do
        sleep 2
      done &&
      echo 'Postgres ready, starting Budgeting service...' &&
      dotnet Budgeting.dll
      "

  mongo-booking:
    image: mongo:7
    container_name: bookingservice
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${BOOKING_MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${BOOKING_MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${BOOKING_MONGO_APP_DB}
    volumes:
      - mongo_booking_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  booking:
    image: lewda853/fafcab-booking-service:latest
    container_name: booking-service
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "${BOOKING_PORT}:${BOOKING_PORT}"
    environment:
      GATEWAY_URI: "http://faf-mgmt-gateway:${GATEWAY_PORT}"
      BOOKING_PORT: "${BOOKING_PORT}"
      BOOKING_MONGO_URI: "mongodb://${BOOKING_MONGO_APP_USER}:${BOOKING_MONGO_APP_PASSWORD}@mongo-booking:27017/${BOOKING_MONGO_APP_DB}?authSource=admin"
      BOOKING_MONGO_DB_NAME: "${BOOKING_MONGO_APP_DB}"
      BOOKING_SERVICE_NAME: "booking-service"
      BOOKING_MAX_CONCURRENT_TASKS: "${BOOKING_MAX_CONCURRENT_TASKS}"
      BOOKING_TASK_TIMEOUT: "${BOOKING_TASK_TIMEOUT}"
      BOOKING_GOOGLE_CREDENTIALS_PATH: "/app/google-credentials.json"
      GOOGLE_CALENDAR_ID: "${BOOKING_GOOGLE_CALENDAR_ID}"
      TIMEZONE: "${BOOKING_TIMEZONE}"
    volumes:
      - ./google-credentials.json:/app/google-credentials.json:ro
    depends_on:
      mongo-booking:
        condition: service_healthy
  
  mongo-checkin:
    image: mongo:7
    container_name: mongo-checkin
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${CHECKIN_MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${CHECKIN_MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${CHECKIN_MONGO_APP_DB}
    volumes:
      - mongo_checkin_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  checkin:
    image: lewda853/fafcab-checkin-service:latest
    container_name: checkin-service
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "${CHECKIN_PORT}:${CHECKIN_PORT}"
    environment:
      CHECKIN_PORT: "${CHECKIN_PORT}"
      GATEWAY_URI: "http://faf-mgmt-gateway:${GATEWAY_PORT}"
      CHECKIN_SERVICE_NAME: "checkin-service"
      CHECKIN_MONGO_URI: "mongodb://${CHECKIN_MONGO_APP_USER}:${CHECKIN_MONGO_APP_PASSWORD}@mongo-checkin:27017/${CHECKIN_MONGO_APP_DB}?authSource=admin"
      CHECKIN_MONGO_DB_NAME: "${CHECKIN_MONGO_APP_DB}"
    depends_on:
      mongo-checkin:
        condition: service_healthy

  sharing_postgres:
    image: postgres:16
    container_name: sharing-service-db
    environment:
      POSTGRES_USER: ${SHARING_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SHARING_POSTGRES_PASSWORD}
      POSTGRES_DB: ${SHARING_POSTGRES_DB}
    ports:
      - "${SHARING_POSTGRES_PORT}:5432"
    volumes:
      - sharing_postgres_data:/var/lib/postgresql/data
      - ./seed/sharing-service:/docker-entrypoint-initdb.d

  sharing-service:
    image: felycianovac/sharing-service:latest
    container_name: sharing-service
    environment:
      DB_CONNECTION: ${SHARING_DB_CONNECTION}
      JWT_SECRET: ${SHARING_JWT_SECRET}
      JWT_AUDIENCE: ${SHARING_JWT_AUDIENCE}
      JWT_ISSUER: ${SHARING_JWT_ISSUER}
      NOTIFICATION_SERVICE_URL: ${SHARING_NOTIFICATION_SERVICE_URL}
      GATEWAY_URI: ${GATEWAY_URI}
      SERVICE_NAME: ${SHS_SERVICE_NAME}
      SERVICE_PORT: 80
    ports:
      - "${SHARING_SERVICE_PORT}:80"
    depends_on:
      - sharing_postgres

  fund-raising-service:
    container_name: fund-raising-service
    image: felycianovac/fund-raising-service:latest
    environment:
      DB_CONNECTION: ${FR_DB_CONNECTION}
      JWT_SECRET: ${FR_JWT_SECRET}
      JWT_AUDIENCE: ${FR_JWT_AUDIENCE}
      JWT_ISSUER: ${FR_JWT_ISSUER}
      SHARING_SERVICE_URL: ${FR_SHARING_SERVICE_URL}
      TEA_SERVICE_URL: ${FR_TEA_SERVICE_URL}
      SERVICE_NAME: ${FRS_SERVICE_NAME}
      SERVICE_PORT: 80
      GATEWAY_URI: ${GATEWAY_URI}
    ports:
      - "${FR_SERVICE_PORT}:80"
    depends_on:
      - fr_postgres

  fr_postgres:
    image: postgres:16
    container_name: fund-raising-service-db
    environment:
      POSTGRES_USER: ${FR_POSTGRES_USER}
      POSTGRES_PASSWORD: ${FR_POSTGRES_PASSWORD}
      POSTGRES_DB: ${FR_POSTGRES_DB}
    ports:
      - "${FR_POSTGRES_PORT}:5432"
    volumes:
      - fr_postgres_data:/var/lib/postgresql/data
      - ./seed/fund-raising-service:/docker-entrypoint-initdb.d
  
  user-management:
    image: mashacol/user-management-service:latest
    container_name: user-management-service
    platform: linux/amd64
    depends_on:
      ums_postgres:
        condition: service_healthy
      ums_redis:
        condition: service_healthy
    ports:
      - "${UMS_PORT}:${UMS_PORT}"
    environment:
      NODE_ENV: ${UMS_NODE_ENV:-production}
      PORT: ${UMS_PORT}
      DB_HOST: ums_postgres
      DB_PORT: 5432
      DB_NAME: ${UMS_DB_NAME}
      DB_USERNAME: ${UMS_DB_USERNAME}
      DB_PASSWORD: ${UMS_DB_PASSWORD}
      JWT_SECRET: ${UMS_JWT_SECRET}
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN:-}
      DISCORD_GUILD_ID: ${DISCORD_GUILD_ID:-}
      DISCORD_API_BASE_URL: "https://discord.com/api/v10"
      NOTIFICATION_SERVICE_URL: http://notification-service:${NS_SERVICE_PORT}/api/notifications
      REDIS_HOST: ums-redis
      REDIS_PORT: ${UMS_REDIS_PORT}
      REDIS_DB: 0
      CACHE_TTL: 3600
      GATEWAY_URI: "http://faf-mgmt-gateway:${GATEWAY_PORT}"
    restart: always

  notification:
    image: mashacol/notification-service:latest
    container_name: notification-service
    platform: linux/amd64
    depends_on:
      ns_redis:
        condition: service_healthy
    ports:
      - "${NS_SERVICE_PORT}:${NS_SERVICE_PORT}"
    environment:
      NODE_ENV: ${NS_NODE_ENV:-production}
      PORT: ${NS_SERVICE_PORT}
      REDIS_HOST: ns-redis
      REDIS_PORT: ${NS_REDIS_PORT}
      REDIS_DB: 0
      CACHE_TTL: 604800
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      DISCORD_GUILD_ID: ${DISCORD_GUILD_ID}
      DISCORD_API_BASE_URL: "https://discord.com/api/v10"
      GATEWAY_URI: "http://faf-mgmt-gateway:${GATEWAY_PORT}"
    restart: always

  ums_redis:
    image: redis:7-alpine
    container_name: ums-redis
    ports:
      - "${UMS_REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  ns_redis:
    image: redis:7-alpine
    container_name: ns-redis
    ports:
      - "${NS_REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  ums_postgres_data:
  lfs_postgres_data:
  bs_postgres_data:
  mongo_booking_data:
  mongo_checkin_data:
  sharing_postgres_data:
  fr_postgres_data:
  redis_data:
