{
  "info": {
    "name": "FAFCab \u2014 Booking Service",
    "_postman_id": "391c308e-b8de-43c8-9c88-afd64347aeac",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Postman collection to test the FAFCab Booking Service."
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "u1",
      "type": "string"
    },
    {
      "key": "room",
      "value": "main",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Healthz",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/healthz",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "healthz"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status 200', () => pm.response.to.have.status(200));",
              "pm.test(\"body contains 'ok'\", () => pm.response.text().toLowerCase().includes('ok'));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Booking \u2014 valid (201)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const now = new Date();",
              "const start = new Date(now.getTime() + 5*60*1000);",
              "const end = new Date(now.getTime() + 65*60*1000);",
              "pm.variables.set('start', start.toISOString());",
              "pm.variables.set('end', end.toISOString());"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('created (201)', () => pm.response.to.have.status(201));",
              "const j = pm.response.json();",
              "pm.test('has bookingId', () => !!j.bookingId);",
              "pm.collectionVariables.set('bookingId', j.bookingId);",
              "pm.collectionVariables.set('createdStart', j.startTime);",
              "pm.collectionVariables.set('createdEnd', j.endTime);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"userId\":\"{{userId}}\",\"room\":\"{{room}}\",\"startTime\":\"{{start}}\",\"endTime\":\"{{end}}\"}"
        },
        "url": {
          "raw": "{{baseUrl}}/bookings",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "bookings"
          ]
        }
      }
    },
    {
      "name": "Create Booking \u2014 overlapping (409)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"userId\":\"{{userId}}\",\"room\":\"{{room}}\",\"startTime\":\"{{createdStart}}\",\"endTime\":\"{{createdEnd}}\"}"
        },
        "url": {
          "raw": "{{baseUrl}}/bookings",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "bookings"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('conflict (409)', () => pm.response.to.have.status(409));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "List All Bookings (200)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/bookings",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "bookings"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status 200', () => pm.response.to.have.status(200));",
              "const j = pm.response.json();",
              "pm.test('is array', () => Array.isArray(j));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "List Bookings in Range (200)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set('rangeStart', pm.collectionVariables.get('createdStart'));",
              "pm.variables.set('rangeEnd', pm.collectionVariables.get('createdEnd'));"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status 200', () => pm.response.to.have.status(200));",
              "const j = pm.response.json();",
              "pm.test('is array', () => Array.isArray(j));"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/bookings?start={{rangeStart}}&end={{rangeEnd}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "bookings"
          ],
          "query": [
            {
              "key": "start",
              "value": "{{rangeStart}}"
            },
            {
              "key": "end",
              "value": "{{rangeEnd}}"
            }
          ]
        }
      }
    },
    {
      "name": "Delete Booking (204)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/bookings/{{bookingId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "bookings",
            "{{bookingId}}"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('no content (204)', () => pm.response.to.have.status(204));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Delete Booking \u2014 nonexistent (404)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/bookings/00000000-0000-0000-0000-000000000000",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "bookings",
            "00000000-0000-0000-0000-000000000000"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('not found (404)', () => pm.response.to.have.status(404));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Booking \u2014 400 (missing fields)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{}"
        },
        "url": {
          "raw": "{{baseUrl}}/bookings",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "bookings"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('bad request (400)', () => pm.response.to.have.status(400));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}